# Modern Art Portfolio - Backend Dockerfile
# Foundation Architecture by Phoenix
# Multi-stage build for optimized production deployment

# Development stage
FROM node:20-alpine AS development
WORKDIR /app

# Install dependencies for native modules
RUN apk add --no-cache python3 make g++ sqlite

# Copy package files
COPY src/backend/package*.json ./
COPY src/backend/tsconfig.json ./
RUN npm ci

# Copy source code
COPY src/backend/src ./src

# Expose port and start development server
EXPOSE 4000
CMD ["npm", "run", "dev"]

# Build stage
FROM node:20-alpine AS build
WORKDIR /app

# Install dependencies for native modules
RUN apk add --no-cache python3 make g++ sqlite

# Copy package files and install dependencies
COPY src/backend/package*.json ./
COPY src/backend/tsconfig.json ./
RUN npm ci

# Copy source and build
COPY src/backend/src ./src
RUN npm run build

# Production stage
FROM node:20-alpine AS production
WORKDIR /app

# Install production dependencies and native modules
# ffmpeg needed for video processing (metadata extraction and thumbnail generation)
RUN apk add --no-cache sqlite ffmpeg

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs
RUN adduser -S backend -u 1001

# Maintain same directory structure as dev for path resolution compatibility
# Copy package files and install production dependencies only
COPY src/backend/package*.json ./src/backend/
WORKDIR /app/src/backend
RUN npm ci --omit=dev && npm cache clean --force

# Copy built application maintaining structure: /app/src/backend/dist/
COPY --from=build /app/dist ./dist
# Copy database schema files (not included in TypeScript build)
COPY src/backend/src/database ./dist/database

# Copy shared logger.js maintaining structure: /app/src/logger.js
WORKDIR /app
COPY src/logger.js ./src/logger.js

# Copy deployments directory for site-config files
COPY deployments ./deployments

# Create data directory for SQLite
RUN mkdir -p /app/data && chown -R backend:nodejs /app
USER backend

# Expose port
EXPOSE 4000
ENV NODE_ENV=production

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:4000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# Run from backend directory
WORKDIR /app/src/backend
CMD ["node", "dist/index.js"]